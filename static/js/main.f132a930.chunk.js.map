{"version":3,"sources":["components/Counter/CounterValue/CounterValue.jsx","components/Counter/Button/Button.jsx","redux/reducer.js","components/Counter/Counter.jsx","components/Value/Input/Input.jsx","components/Value/Value.jsx","App.jsx","serviceWorker.js","redux/store.js","index.jsx"],"names":["CounterValue","props","className","numberColor","counterValue","Button","onClick","onHandlerClick","name","initialState","maxValue","startValue","statusBlock","statusUnblock","reducer","state","action","type","Number","numberStart","numberMax","connect","buttonInc","buttonReset","classNameInc","classNameReset","Input","onCLickInput","onChange","e","onHandlerChange","target","value","buttonSet","changeValueStart","changeValueMax","changeInput","maxColor","maxNumber","startColor","startNumber","classNameSet","Boolean","window","location","hostname","match","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f132a930.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\n\r\nconst CounterValue = (props) => {\r\n\r\n    return (\r\n      <div className=\"span\">\r\n      <span className={props.numberColor}>{props.counterValue}</span>\r\n      </div>\r\n    );\r\n\r\n}\r\n\r\nexport default CounterValue;\r\n","import React from 'react';\r\n\r\n\r\nconst Button = (props) => {\r\n\r\n    return (\r\n      <button\r\n        onClick={props.onHandlerClick}\r\n        className={props.className}>\r\n        {props.name}\r\n      </button>\r\n    )\r\n\r\n}\r\n\r\nexport default Button;\r\n","const INC = \"INC\"\r\nconst RESET = \"RESET\"\r\nconst SET = \"SET\"\r\nconst VALUE_START = \"VALUE_START\"\r\nconst VALUE_MAX = \"VALUE_MAX\"\r\nconst CHANGE_INPUT = \"CHANGE_INPUT\"\r\n\r\n\r\nconst initialState = {\r\n  counterValue: 3,\r\n  maxValue: 8,\r\n  startValue: 3,\r\n  statusBlock: \"block\",\r\n  statusUnblock: \"unblock\"\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case INC:\r\n      return {\r\n        ...state, counterValue: state.counterValue + 1\r\n      }\r\n    case RESET:\r\n      return {\r\n        ...state, counterValue: state.startValue\r\n      }\r\n    case SET:\r\n      return {\r\n        ...state,\r\n        counterValue: state.startValue,\r\n        statusBlock: \"block\",\r\n        statusUnblock: \"unblock\"\r\n      }\r\n    case VALUE_START:\r\n      return {\r\n        ...state,\r\n        startValue: Number(action.numberStart),\r\n      }\r\n    case VALUE_MAX:\r\n      return {\r\n        ...state,\r\n        maxValue: Number(action.numberMax),\r\n      }\r\n    case CHANGE_INPUT:\r\n      if ((state.startValue || state.maxValue) < 0) {\r\n        return {\r\n          ...state, counterValue: \"incorrect value!\"\r\n        }\r\n      } else if (state.maxValue === state.startValue) {\r\n        return {\r\n          ...state, counterValue: \"incorrect value!\"\r\n        }\r\n      } else if (state.maxValue < state.startValue) {\r\n        return {\r\n          ...state, startValue: state.maxValue\r\n        }\r\n      } else {\r\n        return {\r\n          ...state,\r\n          counterValue: \"enter values and press 'set'\",\r\n          statusBlock: \"unblock\",\r\n          statusUnblock: \"block\"\r\n        }\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const buttonInc = () => ({type: INC})\r\nexport const buttonReset = () => ({type: RESET})\r\nexport const buttonSet = () => ({type: SET})\r\nexport const changeValueStart = (numberStart) => ({type: VALUE_START, numberStart})\r\nexport const changeValueMax = (numberMax) => ({type: VALUE_MAX, numberMax})\r\nexport const changeInput = () => ({type: CHANGE_INPUT})\r\n\r\nexport default reducer","import React from 'react';\r\nimport CounterValue from \"./CounterValue/CounterValue\";\r\nimport Button from \"./Button/Button\";\r\nimport {connect} from \"react-redux\";\r\nimport {buttonInc, buttonReset} from \"../../redux/reducer\";\r\n\r\n\r\nconst Counter = (props) => {\r\n\r\n  let onHandlerClickInc = () => {\r\n    props.buttonInc()\r\n  }\r\n  let onHandlerClickReset = () => {\r\n    props.buttonReset()\r\n  }\r\n  return (\r\n    <div className=\"counter\">\r\n      <CounterValue counterValue={props.counterValue} numberColor={props.numberColor}/>\r\n      <div className=\"buttons\">\r\n        <Button\r\n          className={props.classNameInc}\r\n          onHandlerClick={onHandlerClickInc}\r\n          name=\"Inc\"/>\r\n        <Button\r\n          className={props.classNameReset}\r\n          onHandlerClick={onHandlerClickReset}\r\n          name=\"Reset\"/>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\n\r\nexport default connect(null, {buttonInc, buttonReset})(Counter);\r\n","import React from 'react';\r\n\r\n\r\nconst Input = (props) => {\r\n\r\n  let onChange = (e) => {\r\n    props.onHandlerChange(e.target.value)\r\n  }\r\n  let onCLickInput = () => {\r\n    props.onCLickInput()\r\n  }\r\n\r\n  return (\r\n    <div className=\"input-item\">\r\n      <span>{props.name}</span>\r\n      <input\r\n        onClick={onCLickInput}\r\n        onChange={onChange}\r\n        className={props.className}\r\n        type=\"number\"\r\n        value={props.value}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Input;\r\n","import React from 'react';\r\nimport Button from \"../Counter/Button/Button\";\r\nimport Input from \"./Input/Input\";\r\nimport {connect} from \"react-redux\";\r\nimport {buttonSet, changeInput, changeValueMax, changeValueStart} from \"../../redux/reducer\";\r\n\r\n\r\nconst Value = (props) => {\r\n\r\n  let onHandlerChangeMax = (maxNumber) => {\r\n    props.changeValueMax(maxNumber)\r\n  }\r\n  let onHandlerChangeStart = (startNumber) => {\r\n    props.changeValueStart(startNumber)\r\n  }\r\n  let onHandlerClickSet = () => {\r\n    props.buttonSet()\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"counter\">\r\n      <div className=\"inputs\">\r\n        <Input className={props.maxColor}\r\n               onHandlerChange={onHandlerChangeMax}\r\n               value={props.maxValue}\r\n               name=\"Max Value:\"\r\n               onCLickInput={props.changeInput}/>\r\n        <Input className={props.startColor}\r\n               onHandlerChange={onHandlerChangeStart}\r\n               value={props.startValue}\r\n               onCLickInput={props.changeInput}\r\n               name=\"Start Value:\"/>\r\n      </div>\r\n      <div className=\"buttons\">\r\n        <Button\r\n          className={props.classNameSet}\r\n          onHandlerClick={onHandlerClickSet}\r\n          name=\"Set\"/>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default connect(null, {buttonSet, changeValueStart, changeValueMax, changeInput})(Value);\r\n","import React from 'react';\nimport './App.css';\nimport Counter from \"./components/Counter/Counter\";\nimport Value from \"./components/Value/Value\";\nimport {connect} from \"react-redux\";\n\nconst App = (props) => {\n\n  let classNameInc = props.counterValue === props.maxValue ? props.statusBlock : props.statusUnblock\n  let classNameReset = props.counterValue === props.startValue ? props.statusBlock : props.statusUnblock\n\n  let numberColor\n  let classNameSet\n  let startColor\n  let maxColor\n  if (props.startValue < 0) {\n    classNameSet = \"block\"\n    startColor = \"input-elementRed\"\n    numberColor = \"numberColor\"\n    maxColor = \"input-element\"\n\n  } else if (props.maxValue < 0) {\n    classNameSet = \"block\"\n    maxColor = \"input-elementRed\"\n    numberColor = \"numberColor\"\n    startColor = \"input-element\"\n  } else if (props.maxValue === props.startValue) {\n    startColor = \"input-elementRed\"\n    maxColor = \"input-elementRed\"\n    classNameSet = \"block\"\n    numberColor = \"numberColor\"\n  } else if (props.counterValue === props.maxValue) {\n    startColor = \"input-element\"\n    maxColor = \"input-element\"\n    classNameSet = \"block\"\n    numberColor = \"numberColor\"\n  } else {\n    classNameSet = props.statusBlock\n    startColor = \"input-element\"\n    maxColor = \"input-element\"\n    numberColor = \"\"\n  }\n\n\n  return (\n\n    <div className=\"App\">\n      <Value\n        startColor={startColor}\n        maxColor={maxColor}\n        classNameSet={classNameSet}\n        maxValue={props.maxValue}\n        startValue={props.startValue}\n      />\n\n      <Counter\n        classNameInc={classNameInc}\n        classNameReset={classNameReset}\n        counterValue={props.counterValue}\n        numberColor={numberColor}/>\n    </div>\n  );\n\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    counterValue: state.counterValue,\n    maxValue: state.maxValue,\n    startValue: state.startValue,\n    statusBlock: state.statusBlock,\n    statusUnblock: state.statusUnblock,\n  }\n}\n\n\nexport default connect(mapStateToProps, null)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {createStore} from \"redux\";\r\nimport reducer from \"./reducer\";\r\n\r\n\r\n\r\n\r\nexport const store = createStore(reducer)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}